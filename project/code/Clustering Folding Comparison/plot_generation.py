import matplotlib
import numpy as np
from matplotlib import pyplot

#variables vs. epsilon, americasProblem
pyplot.figure(1)
variables=np.array([[24,20,20,16,14,14],[24,23,22,22,23,22],[24,24,24,24,24,24]])
epsilon=np.array([0,0.3,0.4,0.5,0.6,0.7])
pyplot.title("Variable Reduction vs. Episilon Using Variable Folding Method")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("variables (fraction of original problem)")
pyplot.scatter(epsilon,variables[0]/float(variables[0][0]),color='k',label="2-coloring")
pyplot.scatter(epsilon,variables[1]/float(variables[1][0]),color='b',label="3-coloring")
pyplot.scatter(epsilon,variables[2]/float(variables[2][0]),color='g',label="4-coloring")
pyplot.legend(loc='lower left')
pyplot.savefig("variables_epsilon_americas.png", dpi=200, transparent=True)

#solution vs. epsilon, americasProblem
#2-coloring
pyplot.figure(2)
solution=np.array([0.763157895,0.394736842,0.710526316,0.736842105,0.710526316,0.657894737,0.684210526])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,1.1])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_2coloring.png",dpi=200,transparent=True)

#3-coloring
pyplot.figure(3)
solution=np.array([0.973684211,0.605263158,0.947368421,0.947368421,0.947368421,0.973684211,0.947368421])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,1.1])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_3coloring.png",dpi=200,transparent=True)

#4-coloring
pyplot.figure(4)
solution=np.array([1,0.710526316,1,1,1,1,1])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,1.1])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_4coloring.png",dpi=200,transparent=True)

#variables vs. epsilon, pigeonhole
pyplot.figure(5)
variables=np.array([[8,8,7,6,6,6],[36,31,28,28,22,18],[72,54,41,35,33,22],[140,77,53,42,35,25],[165,86,59,46,35,25]])
pyplot.title("Variable Reduction vs. Episilon Using Variable Folding Method")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("variables (fraction of original problem)")
pyplot.scatter(epsilon,variables[0]/float(variables[0][0]),color='k',label="4 items, 2 boxes")
pyplot.scatter(epsilon,variables[1]/float(variables[1][0]),color='b',label="6 items, 4 boxes")
pyplot.scatter(epsilon,variables[2]/float(variables[2][0]),color='g',label="8 items, 6 boxes")
pyplot.scatter(epsilon,variables[3]/float(variables[3][0]),color='r',label="10 items, 8 boxes")
pyplot.scatter(epsilon,variables[4]/float(variables[4][0]),color='c',label="11 items, 9 boxes")
pyplot.legend(loc='lower left')
pyplot.savefig("variables_epsilon_pigeon.png", dpi=200, transparent=True)

#4 in 2
pyplot.figure(6)
solution=np.array([0.625,0.625,0.875,0.875,0.875,0.875,0.875])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,3.5])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_n4m2.png",dpi=200,transparent=True)

#6 in 4
pyplot.figure(7)
solution=np.array([0.58974359,0.653846154,0.974358974,0.974358974,0.974358974,0.974358974,0.961538462])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,3.5])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_n6m4.png",dpi=200,transparent=True)

#8 in 6
pyplot.figure(8)
solution=np.array([0.43,0.78,0.99,0.98,0.98,0.98,0.97])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,3.5])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_n8m6.png",dpi=200,transparent=True)

#10 in 8
pyplot.figure(9)
solution=np.array([0.348837209,0.781395349,0.988372093,0.981395349,0.981395349,0.979069767,0.979069767])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,3.5])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_n10m8.png",dpi=200,transparent=True)

#11 in 9
pyplot.figure(10)
solution=np.array([0.323426573,0.867132867,0.98951049,0.986013986,0.984265734,0.982517483,0.982517483])
pyplot.title("Solution Quality")
pyplot.xlabel("epsilon in epsilon net")
pyplot.ylabel("objective value")
pyplot.xlim([0,1])
pyplot.ylim([0,3.5])
pyplot.plot([0,1],[1,1],color='k',label="optimal solution")
pyplot.plot([0,1],[solution[1]/float(solution[0]),solution[1]/float(solution[0])],color='r',label="SDP vector clustering")
pyplot.scatter(epsilon[1::],solution[2::]/float(solution[0]),color='g',label="Variable Folding Method")
pyplot.legend(loc='lower left')
pyplot.savefig("solution_epsilon_n11m9.png",dpi=200,transparent=True)

pyplot.show()